// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Profile {
  id          Int           @id @default(autoincrement())
  user        User          @relation(fields: [userId], references: [id])
  userId      Int           @unique
  measurement Measurement[]
  name        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Measurement {
  id            Int     @id @default(autoincrement())
  userProfile   Profile @relation(fields: [userProfileId], references: [id])
  userProfileId Int
  totalWeight   Float?

  bodyFatMass Float?
  bodyFatPer  Float?
  muscleMass  Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String

  profile                Profile?
  challenges             ChallengeOnUser[]
  sentFriendRequests     FriendRequest[]   @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[]   @relation("ReceivedFriendRequests")
  friends                UserFriend[]      @relation("Friends")
  friendOf               UserFriend[]      @relation("FriendOf")
  plan                   Plan?             @relation(fields: [planId], references: [id])
  planId                 Int?

  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Plan {
  id    Int    @id @default(autoincrement())
  name  String
  price Float

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model UserFriend {
  user     User @relation("Friends", fields: [userId], references: [id])
  userId   Int
  friend   User @relation("FriendOf", fields: [friendId], references: [id])
  friendId Int

  @@id([userId, friendId])
}

model FriendRequest {
  id         Int      @id @default(autoincrement())
  sender     User     @relation("SentFriendRequests", fields: [senderId], references: [id])
  senderId   Int
  receiver   User     @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])
  receiverId Int
  status     String   @default("pending")
  createdAt  DateTime @default(now())

  @@unique([senderId, receiverId])
}

model Challenge {
  id     Int               @id @default(autoincrement())
  name   String?
  people ChallengeOnUser[]
}

model ChallengeOnUser {
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId Int
  assignedAt  DateTime  @default(now())

  @@id([userId, challengeId])
}

model Exercise {
  id   Int     @id @default(autoincrement())
  name String?
}
